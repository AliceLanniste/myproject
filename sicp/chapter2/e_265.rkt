#lang racket
(define (union-set-ol set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else (let ((x1 (car set1))
                    (x2 (car set2)))
                (cond ((= x1 x2)
                       (cons x1 (union-set-ol (cdr set1) (cdr set2))))
                      ((< x1 x2)
                       (cons x1 (union-set-ol (cdr set1) set2)))
                      ((> x1 x2)
                       (cons x2 (union-set-ol set1 (cdr set2)))))))))
(define (union-set set1 set2)
  (let ((set-l1 (tree->list set1))
        (set-l2 (tree->list set2)))
    (list->tree (union-set-ol set-l1 set-l2))))

(define (intersection-set-ol set1 set2)
  (if (or (null? set1) (null? set2))
    '()
    (let ((x1 (car set1)) (x2 (car set2)))
      (cond ((= x1 x2)
              (cons x1 (intersection-set-ol (cdr set1)
                                         (cdr set2))))
            ((< x1 x2)
              (intersection-set-ol (cdr set1) set2))

            ((< x2 x1)
              (intersection-set-ol set1 (cdr set2)))))))

(define (intersection-set set1 set2)
  (let ((set-l1 (tree->list set1))
        (set-l2 (tree->list set2)))
    (list->tree (intersection-set-ol set-l1 set-l2))))