(define (make-semaphore n) 
   (let ((lock (make-mutex)) 
         (taken 0)) 
     (define (semaphore command) 
       (cond ((eq? command 'acquire) 
              (lock 'acquire) 
              (if (< taken n) 
                  (begin (set! taken (+  taken 1)) (lock 'release)) 
                  (begin (lock 'release) (semaphore 'acquire)))) 
             ((eq? command 'release) 
              (lock 'acquire) 
              (set! taken (- taken 1)) 
              (lock 'release)))) 
     semaphore))


(define (make-semaphore2 n)
  (let ((taken 0)
        (cell (list false)))
     (define (semaphore c)
       (cond ((eq? c 'accquire)
               (if (test-and-set! cell)
                    (semaphore 'accquire))
               (if (< taken n)
                   (begin (set! taken (+ taken 1)) (clear! cell))
                    (begin (clear! cell) (semaphore 'accquire))))
             ((eq? c 'release)
               (if (test-and-set! cell)
                    (semaphore 'release))
               (set! taken (- taken 1))
               (clear! cell))))
    semaphore))